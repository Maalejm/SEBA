package controllers;

import play.*;

import play.mvc.*;
import play.data.validation.*;
import java.math.BigInteger;
import java.util.*;

import javax.persistence.EntityManager;



import models.*;

public class Ads  extends Application {

	
	
	
	public static int getFontSize(int count,int min, int max){
		int fontsize=0;
		
		//fontsize=min+(count-min)/((max-min)/30);
		
		return fontsize;
	} 
 
	
	public static void index() {
	        List<Ad> ads = Ad.all().fetch();
	        List<Category> cats = Category.find("categorytype_id=?1 order by id","1").fetch();
	        
	        EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from Ad as a group by category_id order by maxCount").getResultList();
	        int max= bCounts.get(0).intValue();
	        int min=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from Ad as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= Ads.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
	        
	        render(ads,cats,fonts,min,max);
	    }
	 
	 
	 public static void list(String search, int category, Integer size, Integer page, int firstPage, int lastPage) {
	        List<Ad> ads = null;
	        
	        List<Category> cats = Category.find("categorytype_id=?1","1").fetch();
	        
	        EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from Ad as a group by category_id order by maxCount").getResultList();
	        int max= bCounts.get(0).intValue();
	        int min=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from Ad as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= Ads.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
	        
	        int pagesCount=0;

	        page = page != null ? page : 1;
	        if(search.trim().length() == 0) {
	        	Long l=null;
	        	if(category==0){
	        	
	        		ads = Ad.find("order by createDate desc").fetch(page, size);
		            l= Ad.count();
	        	}else{
	        		
		        
		            ads = Ad.find(" category_id=?1 order by createDate desc",category).fetch(page, size);
		            l= Ad.count(" category_id=?1 ",category);
	        		
	        	}
	            
	            Long l2=(l/10);
	            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
	            pagesCount=Integer.valueOf(l2.intValue());
	            
	        } else {
	            search = search.toLowerCase();
	            Long l= null;
	            if(category==0){
	            ads = Ad.find("(lower(headline) like ?1 OR lower(description) like ?2)", "%"+search+"%", "%"+search+"%").fetch(page, size);
	            l= Ad.count("(lower(headline) like ?1 OR lower(description) like ?2)", "%"+search+"%", "%"+search+"%");
	            }else {
	            ads = Ad.find(" category_id=?1 and (lower(headline) like ?2 OR lower(description) like ?3)",category, "%"+search+"%", "%"+search+"%").fetch(page, size);
	            l= Ad.count("category_id=?1 and (lower(headline) like ?2 OR lower(description) like ?3)",category, "%"+search+"%", "%"+search+"%");
	             }
	            
	            Long l2=(l/10);
	            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
	            pagesCount=Integer.valueOf(l2.intValue());
	            
	        }
	        
	        
	        
	        if((lastPage-page)<=2){
	           firstPage=page-2;
	           lastPage=page+7;
	           if(lastPage > pagesCount) lastPage=pagesCount;
	        	
	        }else if((page-firstPage)<=2){
		           firstPage=page-7;
		           lastPage=page+2;
		           if(firstPage<1) {
		        	   firstPage=1;
		   	           lastPage=10;
		           }
		        	
		        }
	        
	        if(lastPage>pagesCount)
	        	lastPage=pagesCount;
	       
	        render(ads, search, size, page,pagesCount,firstPage,lastPage,cats,fonts);
	    }
	 
	 public static void getImage(long id) {
  	   //final Ad ad = Ad.findById(id);
  	   //notFoundIfNull(ad);
  	   //response.setContentTypeIfNotSet(ad.image.type());
  	   //renderBinary(ad.image.get());
  	
  	  
  	}
}
