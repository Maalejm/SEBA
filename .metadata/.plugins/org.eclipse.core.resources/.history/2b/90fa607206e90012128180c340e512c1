package controllers;

import play.mvc.Controller;
import models.Ad;
import models.Category;
import models.RentOffer;
import models.Student;
import play.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.io.*;

 

import play.mvc.*;
import play.data.validation.*;

import java.math.BigInteger;
import java.util.*;

import javax.persistence.EntityManager;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;

public class RentOffers extends Controller{
	
	
	public static int getFontSize(int count,int min, int max){
		
		
		int fontsize=1;
		
		  float di=((max-min)/30);
			
			if (di==0)
				di=1;
			
			fontsize=(int) (10+(count-min)/di);
			
		return fontsize;
	} 
 
	
	
	public static void index(int success,String id) {
		
	        List<RentOffer> offers = RentOffer.all().fetch();
	        List<Category> cats = Category.find("categorytype_id=?1 order by id","2").fetch();
	        
	        EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by maxCount").getResultList();
	        int min= bCounts.get(0).intValue();
	        int max=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= RentOffers.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
	        
	        render(offers,cats,fonts,min,max,success,id);
	    }
	 
	 public static void newOffer( ){
		 
		 List<Category> cats = Category.find("categorytype_id=?1","2").fetch();
		 EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by maxCount").getResultList();
	        int min= bCounts.get(0).intValue();
	        int max=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= RentOffers.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
	        
		 render(fonts,min,max,cats);
	 }
	 
	 public static void viewOffer(String id){
		
		 RentOffer of= RentOffer.findById(Long.parseLong(id));
		 List<Category> cats = Category.find("categorytype_id=?1 order by id","2").fetch();
		 
		 EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by maxCount").getResultList();
	        int min= bCounts.get(0).intValue();
	        int max=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= RentOffers.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
			
		 render(of,fonts,min,max,cats);	
	}
	 
	 
	 public static void createOffer(@Valid RentOffer of,File photo) throws IOException{
		 
		
		 
		 of.student=  Student.findById(1l);
		 of.IsRentedBy=  Student.findById(1l);
		 of.isRented=0;
		 
		 //ad.category=Category.findById(ad.category.id);
     	 File d= new File(Play.applicationPath.getAbsolutePath()+"/public/img/rooms");
			// if(d.exists()){
     	String suffix = FilenameUtils.getExtension(photo.getName());
	    File o=File.createTempFile("ro-", "."+suffix, d);
			 
			 InputStream input = new FileInputStream(photo);
			 OutputStream output = new FileOutputStream(o);
		of.image=o.getName();
		 
			 
			 
			 of.save();
			 try {
				    IOUtils.copy(input, output);
				} finally {
				    IOUtils.closeQuietly(output);
				    IOUtils.closeQuietly(input);
				}
		
	  
	  RentOffers.index(1,of.category.id.toString());
	  
		  
	      
	 }
	 public static void listOf(String fromDate, String toDate, boolean range, int category, Integer size, Integer page, int firstPage, int lastPage) {
	        List<RentOffer> offers = null;
	        
	        List<Category> cats = Category.find("categorytype_id=?1","2").fetch();
	        
	        EntityManager entityManager = play.db.jpa.JPA.em();
	 	    List<BigInteger> bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by maxCount").getResultList();
	        int min= bCounts.get(0).intValue();
	        int max=bCounts.get(bCounts.size()-1).intValue();
	        bCounts = entityManager.createNativeQuery("select count(*) as maxCount from RentOffer as a group by category_id order by category_id ").getResultList();
	        List<String> fonts=new ArrayList<String>();
	        for (int i=0;i<bCounts.size();i++) {
	     	   BigInteger count= bCounts.get(i);
	     	   int x= RentOffers.getFontSize(count.intValue(),min,max);
	     	   fonts.add(String.valueOf(x));
	     	  
	     	}
	        
	        int pagesCount=0;

	        page = page != null ? page : 1;
	        
	        
	        
	        if(fromDate.trim().length() == 0 && toDate.trim().length() == 0) {
	        	Long l=null;
	        	if(category==0){
	        	
	        		offers = RentOffer.find("order by id desc").fetch(page, size);
		            l= RentOffer.count();
	        	}else{
	        		
		        
		            offers = RentOffer.find(" category_id=?1 order by id desc",category).fetch(page, size);
		            l= RentOffer.count(" category_id=?1 ",category);
	        		
	        	}
	            
	            Long l2=(l/10);
	            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
	            pagesCount=Integer.valueOf(l2.intValue());
	            
	        } else if (fromDate.trim().length()==0) {
	            
	            Long l= null;
	            if(category==0){
	            offers = RentOffer.find(" endDate <= ?", ""+toDate+"").fetch(page, size);
	            l= RentOffer.count(" endDate <= ?", ""+toDate+"");
	            }else {
	            offers = RentOffer.find(" category_id=?1 and (endDate <= ?)",category, ""+toDate+"").fetch(page, size);
	            l= RentOffer.count(" category_id=?1 and (category_id=?1 and (endDate <= ?))",category, ""+toDate+"");
	             }
	            
	            Long l2=(l/10);
	            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
	            pagesCount=Integer.valueOf(l2.intValue());
	            
	        }else if (toDate.trim().length()==0) {
	           
	        	 Long l= null;
		            if(category==0){
		            offers = RentOffer.find(" startDate >= ?", ""+fromDate+"").fetch(page, size);
		            l= RentOffer.count(" startDate >= ?", ""+fromDate+"");
		            }else {
		            offers = RentOffer.find(" category_id=?1 and (startDate <= ?)",category, ""+fromDate+"").fetch(page, size);
		            l= RentOffer.count(" category_id=?1 and (startDate <= ?)",category, ""+fromDate+"");
		             }
		            
		            Long l2=(l/10);
		            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
		            pagesCount=Integer.valueOf(l2.intValue());
	            
	        }else  {
	           
	        	 Long l= null;
		            if(category==0){
		            offers = RentOffer.find(" startDate >= ?1 and endDate<=?2", ""+fromDate+"",""+toDate+"").fetch(page, size);
		            l= RentOffer.count(" startDate >= ?1 and endDate<=?2", ""+fromDate+"",""+toDate+"");
		            }else {
		            offers = RentOffer.find(" category_id=?1 and (startDate <= ?2 and endDate<=?3)",category, ""+fromDate+"", ""+toDate+"").fetch(page, size);
		            l= RentOffer.count(" category_id=?1 and (startDate <= ?2  and endDate<=?3)",category, ""+fromDate+"", ""+toDate+"");
		             }
		            
		            Long l2=(l/10);
		            if ((l%10)>0) l2=(long) (Math.floor(l2)+1);
		            pagesCount=Integer.valueOf(l2.intValue());
	            
	        }
	        
	        
	        
	        if((lastPage-page)<=2){
	           firstPage=page-2;
	           lastPage=page+7;
	           if(lastPage > pagesCount) lastPage=pagesCount;
	        	
	        }else if((page-firstPage)<=2){
		           firstPage=page-7;
		           lastPage=page+2;
		           if(firstPage<1) {
		        	   firstPage=1;
		   	           lastPage=10;
		           }
		        	
		        }
	        
	        if(lastPage>pagesCount)
	        	lastPage=pagesCount;
	       
	        render(offers, size, page,pagesCount,firstPage,lastPage,cats,fonts);
	    }
	 
	 

}
